# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.

from snakemake.utils import min_version, validate
from snakemake.remote import FTP, HTTP

FTP = FTP.RemoteProvider()
HTTP = HTTP.RemoteProvider()

import pandas as pd

##### set minimum snakemake version #####
min_version("7.22.0")


configfile: "config/config.yaml"


validate(config, "schemas/config.schema.yaml")


wildcard_constraints:
    reptype="\w+",
    sample="\w+",
    individual="\w+",
    lane="\d+",


samples = pd.read_csv(config["samples"], sep="\t", dtype=str).set_index(
    ["individual_id", "platform", "sample_id", "lane_id"], drop=False
)
samples.sort_index(inplace=True)
validate(samples, "schemas/samples.schema.yaml")


include: "rules/trim.smk"
include: "rules/ref.smk"
include: "rules/longranger.smk"
include: "rules/bwa.smk"
include: "rules/xtea.smk"
include: "rules/megane.smk"
include: "rules/qc.smk"


# determine if each individual has multiple platforms
platforms = {}
for i in set(samples["individual_id"]):
    p = set(samples.loc[i, "platform"])
    if "illumina" in p and "10x" in p:
        platforms[i] = "illumina_10x"
    else:
        platforms[i] = samples.loc[i, "platform"].iloc[0]

final_output = {}

if "38" in config["genome"]["name"]:
    final_output["megane"] = expand(
        expand(
            rules.megane.output,
            zip,
            individual=platforms.keys(),
            sample=samples.sample_id.unique(),
            allow_missing=True,
        ),
        outdir=config["outdir"],
    )

final_output["xtea"] = expand(
    expand(
        rules.run_xtea.output,
        reptype=config["xtea_reptypes"],
        outdir=config["outdir"],
        allow_missing=True,
    ),
    zip,
    individual=platforms.keys(),
    platform=platforms.values(),
)

final_output["qc"] = expand(
    rules.multiqc.output,
    outdir=config["outdir"],
)


rule all:
    input:
        **final_output,
